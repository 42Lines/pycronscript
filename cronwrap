#!/usr/bin/env python

# Copyright 2014 42Lines, Inc.
# Original Author: Jack Neely <jjneely@42lines.net>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A wrapper for cron scripts.  Idea usage:
#
#    * * * * * root cronwrap [options] /some/bash/whatever [options] [args]
#    * * * * * root cronwrap --quiet /some/bash/whatever [options] [args]
#
# Goals:
# * Exec given script/command with args
# * Consume new process's stdin and stdout
# * In all cases log stdin/stdout
# * On process failure, log level for stdout and stderr will be WARNING
#   or higher (to work with the --quiet flag)
# XXX ToDo:
# *: Default log file / lock file to name based off of given cmd?

from pycronscript import CronScript
import pycronscript.utils as utils

import logging
import sys

LOG = logging.getLogger(__name__)


def main():
    """Run a command and log its output.  Use --quiet to suppress output
       if the command was successful.  The --logfile and --lockfile
       options may be handy to override the default "crownwrap" locations.
    """

    usage = "%prog [options] <command> [command options]"
    script = CronScript(usage=usage,
                        disable_interspersed_args=True)
    with script:
        ret, stdout, stderr = utils.run(" ".join(script.args), shell=True)

        if ret == 0:
            method = LOG.info
        else:
            method = LOG.warning

        method("Command exited with return code: %s" % ret)
        if stdout:
            for i in stdout.split('\n'):
                if i.strip() != "":
                    method("[stdout] %s" % i.strip())
        if stderr:
            for i in stderr.split('\n'):
                if i.strip() != "":
                    method("[stderr] %s" % i.strip())

    return ret

if __name__ == "__main__":
    sys.exit(main())
